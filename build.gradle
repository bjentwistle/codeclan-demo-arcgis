/**
 * Copyright 2019 Esri
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not 
 * use this file except in compliance with the License. You may obtain a copy 
 * of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
 * License for the specific language governing permissions and limitations 
 * under the License.
 */

plugins {
    id 'application'
    id 'idea'
    id 'org.openjfx.javafxplugin' version '0.0.14'
}

idea {
    module {
        downloadJavadoc = true
    }
}

ext {
    arcgisVersion = '200.2.0'
}

repositories {
    mavenCentral()
    maven {
        url 'https://esri.jfrog.io/artifactory/arcgis'
    }
}

configurations {
    natives
}

dependencies {
    implementation "com.esri.arcgisruntime:arcgis-java:$arcgisVersion"
    natives "com.esri.arcgisruntime:arcgis-java-jnilibs:$arcgisVersion"
    natives "com.esri.arcgisruntime:arcgis-java-resources:$arcgisVersion"
    // handle SLF4J http://www.slf4j.org/codes.html#StaticLoggerBinder using a no-operation logger
    implementation "org.slf4j:slf4j-nop:2.0.5"
}

javafx {
    version = "17.0.8"
    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.fxml', 'javafx.web', 'javafx.media' ]
}

application {
    mainModule = "com.mycompany.app"
    mainClass = "com.mycompany.app.App"
}

task createGradlePropertiesAndWriteApiKey {
    description = "Creates a new gradle.properties file with an empty API key variable in the user home ./gradle folder, if the file doesn't already exist."
    group = "build"
    def propertiesFile = new File("${System.properties.getProperty("user.home")}/.gradle/gradle.properties")
    if (!propertiesFile.exists()) {
        print("Go to " + new URL("https://developers.arcgis.com/dashboard") + " to get an API key.")
        print(" Add your API key to ${System.properties.getProperty("user.home")}\\.gradle\\gradle.properties.")
        propertiesFile.write("apiKey = ")
    }
}

task copyNatives(type: Copy) {
    description = "Copies the arcgis native libraries into the .arcgis directory for development."
    group = "build"
    configurations.natives.asFileTree.each {
        from(zipTree(it))
    }
    into "${System.properties.getProperty("user.home")}/.arcgis/$arcgisVersion"
}

run {
    doFirst {
        // sets the API key from the gradle.properties file as a Java system property
        systemProperty 'apiKey', apiKey
    }
    dependsOn copyNatives
}
